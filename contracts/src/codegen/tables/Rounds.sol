// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

// Import user types
import { RoundStateType } from "./../common.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("Rounds")))
);
ResourceId constant RoundsTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0021020201200000000000000000000000000000000000000000000000000000
);

struct RoundsData {
  RoundStateType roundState;
  uint256 deadline;
  string question;
  string answer;
}

library Rounds {
  /** Get the table values' field layout */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.UINT32;

    return SchemaLib.encode(_keySchema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](4);
    _valueSchema[0] = SchemaType.UINT8;
    _valueSchema[1] = SchemaType.UINT256;
    _valueSchema[2] = SchemaType.STRING;
    _valueSchema[3] = SchemaType.STRING;

    return SchemaLib.encode(_valueSchema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "roundIndex";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "roundState";
    fieldNames[1] = "deadline";
    fieldNames[2] = "question";
    fieldNames[3] = "answer";
  }

  /** Register the table with its config */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table with its config */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table with its config (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get roundState */
  function getRoundState(uint32 roundIndex) internal view returns (RoundStateType roundState) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return RoundStateType(uint8(bytes1(_blob)));
  }

  /** Get roundState */
  function _getRoundState(uint32 roundIndex) internal view returns (RoundStateType roundState) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return RoundStateType(uint8(bytes1(_blob)));
  }

  /** Get roundState (using the specified store) */
  function getRoundState(IStore _store, uint32 roundIndex) internal view returns (RoundStateType roundState) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return RoundStateType(uint8(bytes1(_blob)));
  }

  /** Set roundState */
  function setRoundState(uint32 roundIndex, RoundStateType roundState) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(roundState)), _fieldLayout);
  }

  /** Set roundState */
  function _setRoundState(uint32 roundIndex, RoundStateType roundState) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(roundState)), _fieldLayout);
  }

  /** Set roundState (using the specified store) */
  function setRoundState(IStore _store, uint32 roundIndex, RoundStateType roundState) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    _store.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(roundState)), _fieldLayout);
  }

  /** Get deadline */
  function getDeadline(uint32 roundIndex) internal view returns (uint256 deadline) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /** Get deadline */
  function _getDeadline(uint32 roundIndex) internal view returns (uint256 deadline) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /** Get deadline (using the specified store) */
  function getDeadline(IStore _store, uint32 roundIndex) internal view returns (uint256 deadline) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /** Set deadline */
  function setDeadline(uint32 roundIndex, uint256 deadline) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((deadline)), _fieldLayout);
  }

  /** Set deadline */
  function _setDeadline(uint32 roundIndex, uint256 deadline) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((deadline)), _fieldLayout);
  }

  /** Set deadline (using the specified store) */
  function setDeadline(IStore _store, uint32 roundIndex, uint256 deadline) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    _store.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((deadline)), _fieldLayout);
  }

  /** Get question */
  function getQuestion(uint32 roundIndex) internal view returns (string memory question) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /** Get question */
  function _getQuestion(uint32 roundIndex) internal view returns (string memory question) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /** Get question (using the specified store) */
  function getQuestion(IStore _store, uint32 roundIndex) internal view returns (string memory question) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /** Set question */
  function setQuestion(uint32 roundIndex, string memory question) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((question)));
  }

  /** Set question */
  function _setQuestion(uint32 roundIndex, string memory question) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((question)));
  }

  /** Set question (using the specified store) */
  function setQuestion(IStore _store, uint32 roundIndex, string memory question) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    _store.setDynamicField(_tableId, _keyTuple, 0, bytes((question)));
  }

  /** Get the length of question */
  function lengthQuestion(uint32 roundIndex) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of question */
  function _lengthQuestion(uint32 roundIndex) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of question (using the specified store) */
  function lengthQuestion(IStore _store, uint32 roundIndex) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    uint256 _byteLength = _store.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of question
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemQuestion(uint32 roundIndex, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * Get an item of question
   * (unchecked, returns invalid data if index overflows)
   */
  function _getItemQuestion(uint32 roundIndex, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * Get an item of question (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemQuestion(IStore _store, uint32 roundIndex, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _blob = _store.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /** Push a slice to question */
  function pushQuestion(uint32 roundIndex, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /** Push a slice to question */
  function _pushQuestion(uint32 roundIndex, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /** Push a slice to question (using the specified store) */
  function pushQuestion(IStore _store, uint32 roundIndex, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    _store.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /** Pop a slice from question */
  function popQuestion(uint32 roundIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /** Pop a slice from question */
  function _popQuestion(uint32 roundIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /** Pop a slice from question (using the specified store) */
  function popQuestion(IStore _store, uint32 roundIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    _store.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * Update a slice of question at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateQuestion(uint32 roundIndex, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * Update a slice of question at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function _updateQuestion(uint32 roundIndex, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * Update a slice of question (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateQuestion(IStore _store, uint32 roundIndex, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      _store.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /** Get answer */
  function getAnswer(uint32 roundIndex) internal view returns (string memory answer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /** Get answer */
  function _getAnswer(uint32 roundIndex) internal view returns (string memory answer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /** Get answer (using the specified store) */
  function getAnswer(IStore _store, uint32 roundIndex) internal view returns (string memory answer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /** Set answer */
  function setAnswer(uint32 roundIndex, string memory answer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, bytes((answer)));
  }

  /** Set answer */
  function _setAnswer(uint32 roundIndex, string memory answer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, bytes((answer)));
  }

  /** Set answer (using the specified store) */
  function setAnswer(IStore _store, uint32 roundIndex, string memory answer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    _store.setDynamicField(_tableId, _keyTuple, 1, bytes((answer)));
  }

  /** Get the length of answer */
  function lengthAnswer(uint32 roundIndex) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of answer */
  function _lengthAnswer(uint32 roundIndex) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of answer (using the specified store) */
  function lengthAnswer(IStore _store, uint32 roundIndex) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    uint256 _byteLength = _store.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of answer
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemAnswer(uint32 roundIndex, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * Get an item of answer
   * (unchecked, returns invalid data if index overflows)
   */
  function _getItemAnswer(uint32 roundIndex, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * Get an item of answer (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemAnswer(IStore _store, uint32 roundIndex, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _blob = _store.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /** Push a slice to answer */
  function pushAnswer(uint32 roundIndex, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Push a slice to answer */
  function _pushAnswer(uint32 roundIndex, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Push a slice to answer (using the specified store) */
  function pushAnswer(IStore _store, uint32 roundIndex, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    _store.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Pop a slice from answer */
  function popAnswer(uint32 roundIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /** Pop a slice from answer */
  function _popAnswer(uint32 roundIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /** Pop a slice from answer (using the specified store) */
  function popAnswer(IStore _store, uint32 roundIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    _store.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * Update a slice of answer at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateAnswer(uint32 roundIndex, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * Update a slice of answer at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function _updateAnswer(uint32 roundIndex, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * Update a slice of answer (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateAnswer(IStore _store, uint32 roundIndex, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      _store.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /** Get the full data */
  function get(uint32 roundIndex) internal view returns (RoundsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /** Get the full data */
  function _get(uint32 roundIndex) internal view returns (RoundsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint32 roundIndex) internal view returns (RoundsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = _store.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /** Set the full data using individual values */
  function set(
    uint32 roundIndex,
    RoundStateType roundState,
    uint256 deadline,
    string memory question,
    string memory answer
  ) internal {
    bytes memory _staticData = encodeStatic(roundState, deadline);

    PackedCounter _encodedLengths = encodeLengths(question, answer);
    bytes memory _dynamicData = encodeDynamic(question, answer);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /** Set the full data using individual values */
  function _set(
    uint32 roundIndex,
    RoundStateType roundState,
    uint256 deadline,
    string memory question,
    string memory answer
  ) internal {
    bytes memory _staticData = encodeStatic(roundState, deadline);

    PackedCounter _encodedLengths = encodeLengths(question, answer);
    bytes memory _dynamicData = encodeDynamic(question, answer);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint32 roundIndex,
    RoundStateType roundState,
    uint256 deadline,
    string memory question,
    string memory answer
  ) internal {
    bytes memory _staticData = encodeStatic(roundState, deadline);

    PackedCounter _encodedLengths = encodeLengths(question, answer);
    bytes memory _dynamicData = encodeDynamic(question, answer);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /** Set the full data using the data struct */
  function set(uint32 roundIndex, RoundsData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.roundState, _table.deadline);

    PackedCounter _encodedLengths = encodeLengths(_table.question, _table.answer);
    bytes memory _dynamicData = encodeDynamic(_table.question, _table.answer);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /** Set the full data using the data struct */
  function _set(uint32 roundIndex, RoundsData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.roundState, _table.deadline);

    PackedCounter _encodedLengths = encodeLengths(_table.question, _table.answer);
    bytes memory _dynamicData = encodeDynamic(_table.question, _table.answer);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint32 roundIndex, RoundsData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.roundState, _table.deadline);

    PackedCounter _encodedLengths = encodeLengths(_table.question, _table.answer);
    bytes memory _dynamicData = encodeDynamic(_table.question, _table.answer);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * Decode the tightly packed blob of static data using this table's field layout
   * Undefined behaviour for invalid blobs
   */
  function decodeStatic(bytes memory _blob) internal pure returns (RoundStateType roundState, uint256 deadline) {
    roundState = RoundStateType(uint8(Bytes.slice1(_blob, 0)));

    deadline = (uint256(Bytes.slice32(_blob, 1)));
  }

  /**
   * Decode the tightly packed blob of static data using this table's field layout
   * Undefined behaviour for invalid blobs
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory question, string memory answer) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    question = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    answer = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * Decode the tightly packed blob using this table's field layout.
   * Undefined behaviour for invalid blobs.
   */
  function decode(
    bytes memory _staticData,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (RoundsData memory _table) {
    (_table.roundState, _table.deadline) = decodeStatic(_staticData);

    (_table.question, _table.answer) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /** Delete all data for given keys */
  function deleteRecord(uint32 roundIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /** Delete all data for given keys */
  function _deleteRecord(uint32 roundIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /** Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint32 roundIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /** Tightly pack static data using this table's schema */
  function encodeStatic(RoundStateType roundState, uint256 deadline) internal pure returns (bytes memory) {
    return abi.encodePacked(roundState, deadline);
  }

  /** Tightly pack dynamic data using this table's schema */
  function encodeLengths(
    string memory question,
    string memory answer
  ) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(bytes(question).length, bytes(answer).length);
    }
  }

  /** Tightly pack dynamic data using this table's schema */
  function encodeDynamic(string memory question, string memory answer) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((question)), bytes((answer)));
  }

  /** Tightly pack full data using this table's field layout */
  function encode(
    RoundStateType roundState,
    uint256 deadline,
    string memory question,
    string memory answer
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(roundState, deadline);

    PackedCounter _encodedLengths = encodeLengths(question, answer);
    bytes memory _dynamicData = encodeDynamic(question, answer);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /** Encode keys as a bytes32 array using this table's field layout */
  function encodeKeyTuple(uint32 roundIndex) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(roundIndex));

    return _keyTuple;
  }
}
